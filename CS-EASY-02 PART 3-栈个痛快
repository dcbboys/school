#include <stdio.h>
#include <stdlib.h>

#define MAX_SIZE 100
typedef struct{
    char data[MAX_SIZE];//保存数据的数组
    int top;//保存栈顶元素下标的指针
}Stack;

//初始化栈
void InitStack(Stack *stack)
{
    stack ->top=-1;
}

//判断栈是否为空
int IsEmpty(Stack *stack)
{
    return stack->top==-1;
}

//弹出栈元素
char pop(Stack *stack)
{
    //如果栈为空则不能弹出
    if(IsEmpty (stack))
    {
     printf("栈为空");
     return 0;
    }
    printf ("弹出元素%c\n",stack->data[stack->top]);
    return stack->data[stack->top--] ;
}

//判断栈是否满了
int IsFull(Stack *stack)
{
    if (stack->top==MAX_SIZE-1)
    {return 1;}
    else{return 0;}
}
//栈的压入操作
void push(Stack *stack,char val)
{
    if (IsFull (stack))
    {
     printf("栈满");
     return;
    }
stack->top++;
stack->data[stack->top]=val;
return;
}

//获取栈顶元素的值
int Top(Stack *stack)
{
    //如果栈空，无法获取
    if (IsEmpty(stack))
    {
         printf("栈空，无法获取");
         return 0;
    }
    return stack->data[stack->top];
}

//获取栈元素的个数
int Num(Stack *stack)
{
    return stack->top+1;
}

//栈的打印

void PrintStack(Stack *stack) 
{
    if (IsEmpty(stack)) 
    {
        printf("栈为空\n");
        return;
    }
    printf("最终栈中的元素为\n");
    for (int i = stack->top; i >= 0; i--) 
    {
        printf("%c ", stack->data[i]);
    }
    printf("\n");
}


//主函数
int main()
{//定义一个栈
Stack s1;
//初始化栈
InitStack(&s1);
push(&s1,'k');
push(&s1,'i');
push(&s1,'g');
push(&s1,'l');
pop(&s1);
pop(&s1);
push(&s1,'n');
push(&s1,'m');
push(&s1,'r');
push(&s1,'m');
push(&s1,'e');
push(&s1,'i');
pop(&s1);
pop(&s1);
pop(&s1);
pop(&s1);
push(&s1,'a');
push(&s1,'h');
push(&s1,'e');
pop(&s1);
pop(&s1);
pop(&s1);
pop(&s1);
pop(&s1);
pop(&s1);
PrintStack(&s1);
return 0;
}

//最终结果为k（有点担心我是不是题意理解错了）
